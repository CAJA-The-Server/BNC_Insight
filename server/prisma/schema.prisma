generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  @@map("sessions")

  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

model AuthToken {
  @@map("auth_tokens")

  token        String   @id @db.VarChar(128)
  isAdminToken Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
}

model User {
  @@map("users")

  uid          Int        @id @db.UnsignedSmallInt @default(autoincrement())
  username     String     @unique @db.VarChar(32)
  passwordHash Bytes      @db.Binary(60)
  name         String     @db.VarChar(16)
  isAdmin      Boolean    @default(false)
  articles     Article[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt @default(now())
}

model Category {
  @@map("categories")

  name      String     @id @db.VarChar(16)
  articles  Article[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt @default(now())
}

model Article {
  @@map("articles")

  id           Int         @id @db.UnsignedSmallInt @default(autoincrement())
  uploader     User?       @relation(fields: [uploaderUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  uploaderUid  Int?        @db.UnsignedSmallInt
  category     Category?   @relation(fields: [categoryName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  categoryName String?     @db.VarChar(16)
  title        String      @db.VarChar(64)
  subtitle     String      @db.VarChar(128)
  content      Json
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt @default(now())

  @@index([categoryName])
  @@index([uploaderUid])
}
